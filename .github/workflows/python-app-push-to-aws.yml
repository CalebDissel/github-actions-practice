# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
#trigger test
name: CI/CD Pipeline

on:
  push:
    branches: [ "*" ]  # Run on all branches
    tags: [ "v*" ]     # Run on version tags
  pull_request:
    branches: [ "*" ]  # Run on PRs to all branches

permissions:
  contents: read

jobs:
  test:
    runs-on:
      - codebuild-homework9-${{ github.run_id }}-${{ github.run_attempt }}
    environment: test
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev]"
        pip install --upgrade "coverage>=7.4" "pytest>=8.2" "pytest-cov>=4.1" "ruff>=0.2.0" build

    - name: Lint with ruff
      run: |
        ruff check

    - name: Test with pytest
      run: |
        pytest -v --cov=file_encoder --cov-report=xml --cov-report=term-missing > pytest-output.txt 2>&1

    - name: Build package
      run: |
        python -m build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      if: matrix.python-version == '3.13' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Upload wheel to S3
      if: matrix.python-version == '3.13' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
      run: |
        for file in dist/*.whl; do
          if [ -f "$file" ]; then
            aws s3 cp "$file" s3://${{ secrets.AWS_S3_BUCKET }}/wheels/
          fi
        done

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.13'
      with:
        name: test-results
        path: |
          pytest-output.txt
          coverage.xml
        retention-days: 30

    - name: Configure CodeArtifact
      if: matrix.python-version == '3.13' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
      shell: bash
      run: |
        set -euo pipefail
        pip install --upgrade twine

        CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
          --domain "${{ secrets.CA_DOMAIN }}" \
          --query authorizationToken --output text \
          --region "${{ secrets.AWS_DEFAULT_REGION }}")

        CODEARTIFACT_REPOSITORY_URL=$(aws codeartifact get-repository-endpoint \
          --domain "${{ secrets.CA_DOMAIN }}" \
          --repository "${{ secrets.CA_REPOSITORY }}" \
          --format pypi \
          --query repositoryEndpoint --output text \
          --region "${{ secrets.AWS_DEFAULT_REGION }}")

        echo "CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN" >> "$GITHUB_ENV"
        echo "CODEARTIFACT_REPOSITORY_URL=$CODEARTIFACT_REPOSITORY_URL" >> "$GITHUB_ENV"
        echo "CA_DOMAIN=${{ secrets.CA_DOMAIN }}" >> "$GITHUB_ENV"
        echo "CA_REPOSITORY=${{ secrets.CA_REPOSITORY }}" >> "$GITHUB_ENV"
        echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> "$GITHUB_ENV"
    
    - name: Publish to CodeArtifact
      if: matrix.python-version == '3.13' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
      shell: bash
      env:
        TWINE_USERNAME: aws
        TWINE_PASSWORD: ${{ env.CODEARTIFACT_AUTH_TOKEN }}
      run: |
        set -euo pipefail
    
        # Optional: delete the exact version if it already exists (ignore errors)
        WHEEL=$(ls dist/*.whl | head -n 1)
        PKG=$(basename "$WHEEL" | cut -d- -f1)
        VER=$(basename "$WHEEL" | cut -d- -f2)
        aws codeartifact delete-package-versions \
          --domain "$CA_DOMAIN" \
          --repository "$CA_REPOSITORY" \
          --format pypi \
          --package "$PKG" \
          --versions "$VER" \
          --region "$AWS_DEFAULT_REGION" || true


        # Upload the package
        twine upload --repository-url $CODEARTIFACT_REPOSITORY_URL \
          --username aws \
          --password $CODEARTIFACT_AUTH_TOKEN \
          dist/*.whl
